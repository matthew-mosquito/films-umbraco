@inherits Umbraco.Web.Mvc.UmbracoTemplatePage

<!-- set variables for pagination -->
@{
    <!-- (1) How many items per page, (2) which page requested, (3) what was the search query, (4) previous or next requested?-->
    var pageSize = !string.IsNullOrEmpty(Request.QueryString["pageSize"]) ? Convert.ToInt32(Request.QueryString["pageSize"]) : 5;
    var pageRequested = !string.IsNullOrEmpty(Request.QueryString["page"]) ? Convert.ToInt32(Request.QueryString["page"]) : 1;
    var query = Request.QueryString["query"];
    var sortOrder = Request.QueryString["sortOrder"];
    <!-- Change the requested page if User pressed previous or next button -->
    pageRequested = !string.IsNullOrEmpty(Request.QueryString["previous"]) && pageRequested > 1 ? pageRequested -= 1 : pageRequested;
    pageRequested = Convert.ToBoolean(Request.QueryString["next"]) ? pageRequested += 1 : pageRequested;

    <!-- calculate the number of films to be skipped based on page requested and size of pages -->
    var skip = (pageRequested - 1) * pageSize;

    <!-- set numOfPageLinks as a global variable -->
    int numOfPageLinks;

    <!-- Initialise variables -->
    IEnumerable<IPublishedContent> selection;
    IEnumerable<IPublishedContent> films;

    <!-- Get all of the films -->
    selection = Model.Content.Site().FirstChild("pageContent").FirstChild("filmSection").Children()
        .Where(x => x.IsVisible());

    <!-- Check for a query string, get search results if there is one-->
    if (!string.IsNullOrEmpty(query))
    {
        selection = Umbraco.TypedSearch(Request.QueryString["query"]);

        films = selection.Skip(skip).Take(pageSize).ToList();
    }
    else
    {
        films = selection.Skip(skip).Take(pageSize).ToList();
    }

    <!-- get the number of links to other pages we need-->
    numOfPageLinks = (int)Math.Ceiling((float)selection.Count() / (float)pageSize);

    <!-- order the results depending on type of sort (e.g alphabet descending vs rating) -->
    switch (sortOrder)
    {
        case "Ascending":
            films = films.OrderBy(film => film.GetPropertyValue("filmName")).ToList();
            break;
        case "Descending":
            films = films.OrderByDescending(film => film.GetPropertyValue("filmName")).ToList();
            break;
        case "dateNewest":
            films = films.OrderByDescending(film => film.CreateDate).ToList();
            break;
        case "dateOldest":
            films = films.OrderBy(film => film.CreateDate).ToList();
            break;
        case "rating":
            films = films.OrderByDescending(film => film.GetPropertyValue("rating")).ToList();
            break;
        case "duration":
            films = films.OrderByDescending(film => film.GetPropertyValue("duration")).ToList();
            break;
        default:
            break;
    }
}

<!-- Search field and submit button -->
<div class="row mb-2 mt-4">
    <div class="col-md-12">
        <form action="@Model.Content.Url" method="get">
            <input type="text" class="form-control-sm" placeholder="Search" id="query" name="query" />
            <button class="btn btn-primary">Search</button>
        </form>
    </div>
</div>

<!-- Options for number of Items per page -->
<div class="row mt-2 mb-2">
    <div class="col-md-12">
        Items per page:
        <a class="btn btn-outline-info @(pageSize == 5 ? "active" : null)" id="pageSizeLink" href="/?query=@query&page=1&pageSize=5">5</a>
        <a class="btn btn-outline-info @(pageSize == 10 ? "active" : null)" id="pageSizeLink" href="/?query=@query&page=1&pageSize=10">10</a>
        <a class="btn btn-outline-info @(pageSize == 15 ? "active" : null)" id="pageSizeLink" href="/?query=@query&page=1&pageSize=15">15</a>
        <a class="btn btn-outline-info @(pageSize == 20 ? "active" : null)" id="pageSizeLink" href="/?query=@query&page=1&pageSize=20">20</a>
    </div>
</div>

<!-- Sort by options-->
<div class="row mt-2 mb-2">
    <div class="col-md-12">
        <a href="/?query=@query&page=@pageRequested&pageSize=@pageSize&sortOrder=Ascending" class="btn btn-info" role="button">Alphabet</a>
        <a href="/?query=@query&page=@pageRequested&pageSize=@pageSize&sortOrder=Descending" class="btn btn-info" role="button">Alphabet descending</a>
        <a href="/?query=@query&page=@pageRequested&pageSize=@pageSize&sortOrder=dateNewest" class="btn btn-info" role="button">Newest</a>
        <a href="/?query=@query&page=@pageRequested&pageSize=@pageSize&sortOrder=dateOldest" class="btn btn-info" role="button">Oldest</a>
        <a href="/?query=@query&page=@pageRequested&pageSize=@pageSize&sortOrder=rating" class="btn btn-info" role="button">Rating</a>
        <a href="/?query=@query&page=@pageRequested&pageSize=@pageSize&sortOrder=duration" class="btn btn-info" role="button">Duration</a>
    </div>
</div>

<!-- Table displaying the results -->
@{
<table class="table mt-2">
    <!-- table headers-->
    <tr>
        <th>Name</th>
        <th>Rating</th>
        <th>Duration</th>
    </tr>
    <!-- table fields -->
    @foreach (var film in films)
    {
        if (film.DocumentTypeAlias == "film")
        {
            <tr>
                <td>@film.GetPropertyValue("filmName")</td>
                <td>@film.GetPropertyValue("rating")</td>
                <td>@film.GetPropertyValue("duration")</td>
            </tr>
        }
    }
</table>

    <!-- pagination -->
    <ul class="pagination">
        <li class="page-item">
            <a class="page-link" href="/?query=@query&page=@pageRequested&pageSize=@pageSize&previous=true&sortOrder=@sortOrder">previous</a>
        </li>
        @for (int i = 1; i < numOfPageLinks + 1; i++)
        {
            <li class="page-item @(pageRequested == i ? "active" : null)">
                <a class="page-link" href="/?query=@query&page=@i&pageSize=@pageSize&sortOrder=@sortOrder">@i</a>
            </li>
        }
        @if (pageRequested != numOfPageLinks)
        {
            <li class="page-item">
                <a class="page-link" href="/?query=@query&page=@pageRequested&pageSize=@pageSize&next=true&sortOrder=@sortOrder">Next</a>
            </li>
        }
    </ul>
}