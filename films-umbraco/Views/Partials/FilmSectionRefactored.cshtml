@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@using umbraco.cms.businesslogic.Tags
@{
    Layout = null;
}

<!-- set variables for pagination -->
@{
    <!-- (1) How many items per page, (2) which page requested, (3) what was the search, (4) previous or next-->
    var pageSize = !string.IsNullOrEmpty(Request.QueryString["pageSize"]) ? Convert.ToInt32(Request.QueryString["pageSize"]) : 5;
    var pageRequested = !string.IsNullOrEmpty(Request.QueryString["page"]) ? Convert.ToInt32(Request.QueryString["page"]) : 1;
    var query = Request.QueryString["query"];
    var sortOrder = Request.QueryString["sortOrder"];

    if (!string.IsNullOrEmpty(Request.QueryString["previous"]) && pageRequested > 1)
    {
        pageRequested -= 1;
    }

    if (Convert.ToBoolean(Request.QueryString["next"]))
    {
        pageRequested += 1;
    }

    <!-- calculate the number of films to be skipped -->
    var skip = (pageRequested - 1) * pageSize;

    <!-- set numOfPageLinks as a global variable -->
    int numOfPageLinks;

    <!-- Get all of the films available -->
    var selection = Model.Content.Site().FirstChild("pageContent").FirstChild("filmSection").Children()
            .Where(x => x.IsVisible());
}

<!-- Search field and submit button -->
<div class="row mb-2 mt-4">
    <div class="col-md-12">
        <form action="@Model.Content.Url" method="get">
            <input type="text" class="form-control-sm" placeholder="Search" id="query" name="query" />
            <button class="btn btn-primary">Search</button>
        </form>
    </div>
</div>

<!-- Options for number of Items per page -->
<div class="row mt-2 mb-2">
    <div class="col-md-12">
        Items per page:
        <a class="btn btn-outline-info @(pageSize == 5 ? "active" : null)" id="pageSizeLink" href="/?query=@query&page=1&pageSize=5">5</a>
        <a class="btn btn-outline-info @(pageSize == 10 ? "active" : null)" id="pageSizeLink" href="/?query=@query&page=1&pageSize=10">10</a>
        <a class="btn btn-outline-info @(pageSize == 15 ? "active" : null)" id="pageSizeLink" href="/?query=@query&page=1&pageSize=15">15</a>
        <a class="btn btn-outline-info @(pageSize == 20 ? "active" : null)" id="pageSizeLink" href="/?query=@query&page=1&pageSize=20">20</a>
    </div>
</div>

<!-- sort by options-->
<div class="row mt-2 mb-2">
    <div class="col-md-12">
        <a href="/?query=@query&page=@pageRequested&pageSize=@pageSize&sortOrder=Ascending" class="btn btn-info" role="button">Alphabet</a>
        <a href="/?query=@query&page=@pageRequested&pageSize=@pageSize&sortOrder=Descending" class="btn btn-info" role="button">Alphabet descending</a>
        <a href="/?query=@query&page=@pageRequested&pageSize=@pageSize&sortOrder=dateNewest" class="btn btn-info" role="button">Newest</a>
        <a href="/?query=@query&page=@pageRequested&pageSize=@pageSize&sortOrder=dateOldest" class="btn btn-info" role="button">Oldest</a>
        <a href="/?query=@query&page=@pageRequested&pageSize=@pageSize&sortOrder=rating" class="btn btn-info" role="button">Rating</a>
        <a href="/?query=@query&page=@pageRequested&pageSize=@pageSize&sortOrder=duration" class="btn btn-info" role="button">Duration</a>
    </div>
</div>

<!-- Table displaying the results of the search, if there is no search, display all films -->
@{
    <table class="table mt-2">
        <tr>
            <th>Name</th>
            <th>Rating</th>
            <th>Duration</th>
        </tr>

        @if (!string.IsNullOrEmpty(Request.QueryString["query"]))
        {
            var results = Umbraco.TypedSearch(Request.QueryString["query"]);
            var films = results.Skip(skip).Take(pageSize);

            switch (sortOrder)
            {
                case "Ascending":
                    results = results.OrderBy(film => film.GetPropertyValue("filmName")).ToList();
                    break;
                case "Descending":
                    results = results.OrderByDescending(film => film.GetPropertyValue("filmName"));
                    break;
                case "dateNewest":
                    results = results.OrderByDescending(film => film.CreateDate);
                    break;
                case "dateOldest":
                    results = results.OrderBy(film => film.CreateDate);
                    break;
                case "rating":
                    results = results.OrderByDescending(film => film.GetPropertyValue("rating"));
                    break;
                case "duration":
                    results = results.OrderByDescending(film => film.GetPropertyValue("duration"));
                    break;
                default:
                    break;
            }

            var x = (float)results.Count();
            var y = (float)pageSize;
            numOfPageLinks = (int)Math.Ceiling((float)results.Count() / (float)pageSize);

            <!-- nested foreach loop to ensure only films are returned from the search -->
            foreach (var film in films)
            {
                foreach (var item in selection)
                {
                    if (film.Name == item.Name)
                    {
                        <tr>
                            <td>@item.GetPropertyValue("filmName")</td>
                            <td>@item.GetPropertyValue("rating")</td>
                            <td>@item.GetPropertyValue("duration")</td>
                        </tr>
                    }
                }
            }
        }
        else
        {
            switch (sortOrder)
            {
                case "Ascending":
                    selection = selection.OrderBy(film => film.GetPropertyValue("filmName"));
                    break;
                case "Descending":
                    selection = selection.OrderByDescending(film => film.GetPropertyValue("filmName"));
                    break;
                case "dateNewest":
                    selection = selection.OrderByDescending(film => film.CreateDate);
                    break;
                case "dateOldest":
                    selection = selection.OrderBy(film => film.CreateDate);
                    break;
                case "rating":
                    selection = selection.OrderByDescending(film => film.GetPropertyValue("rating"));
                    break;
                case "duration":
                    selection = selection.OrderByDescending(film => film.GetPropertyValue("duration"));
                    break;
                default:
                    break;
            }

            var Items = selection.Skip(skip).Take(pageSize).ToList();

            numOfPageLinks = (int)Math.Ceiling((float)selection.Count() / (float)pageSize);

            foreach (var item in Items)
            {
                <tr>
                    <td> @item.GetPropertyValue("filmName") </td>
                    <td> @item.GetPropertyValue("rating") </td>
                    <td> @item.GetPropertyValue("duration") </td>
                </tr>
            }
        }
    </table>

    <ul class="pagination">
        <li class="page-item">
            <a class="page-link" href="/?query=@query&page=@pageRequested&pageSize=@pageSize&previous=true&sortOrder=@sortOrder">previous</a>
        </li>
        @for (int i = 1; i < numOfPageLinks + 1; i++)
        {
            <li class="page-item @(pageRequested == i ? "active" : null)">
                <a class="page-link" href="/?query=@query&page=@i&pageSize=@pageSize&sortOrder=@sortOrder">@i</a>
            </li>
        }
        @if (pageRequested != numOfPageLinks)
        {
            <li class="page-item">
                <a class="page-link" href="/?query=@query&page=@pageRequested&pageSize=@pageSize&next=true&sortOrder=@sortOrder">Next</a>
            </li>
        }
    </ul>
}